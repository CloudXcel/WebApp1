{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/** @jsxRuntime classic */\n\n/** @jsx jsx */\nimport { jsx, Input as InputField } from 'theme-ui';\nimport { rgba } from 'polished';\n\nconst Input = (_ref) => {\n  let props = Object.assign({}, _ref);\n  return jsx(InputField, _objectSpread({\n    sx: styles.input\n  }, props));\n};\n\nexport default Input;\nconst styles = {\n  input: {\n    backgroundColor: '#EFF3F7',\n    borderRadius: '5px',\n    fontFamily: 'body',\n    flexGrow: 1,\n    p: ['0 24px'],\n    height: 'auto',\n    minHeight: '60px',\n    width: 'auto',\n    '::placeholder': {\n      color: rgba('#02073E', 0.4)\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}